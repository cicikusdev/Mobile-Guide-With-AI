from fastapi import FastAPI, File, UploadFile, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import base64
import io
import cv2
import numpy as np
from PIL import Image
from ultralytics import YOLO
import logging
from typing import Optional
import time

# Logging konfig√ºrasyonu
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="üß† Mobil Rehber AI Servisi",
    description="YOLOv5 ile g√∂rsel analizi yapan AI servisi",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# YOLOv5 modeli y√ºkle
try:
    model = YOLO('yolov5s.pt')  # K√º√ß√ºk model, hƒ±zlƒ± √ßalƒ±≈üƒ±r
    logger.info("‚úÖ YOLOv5 modeli ba≈üarƒ±yla y√ºklendi")
except Exception as e:
    logger.error(f"‚ùå YOLOv5 modeli y√ºklenemedi: {e}")
    model = None

# COCO sƒ±nƒ±f isimleri (YOLOv5'in varsayƒ±lan sƒ±nƒ±flarƒ±)
COCO_CLASSES = [
    'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat',
    'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat',
    'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack',
    'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',
    'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket',
    'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',
    'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake',
    'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop',
    'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink',
    'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'
]

@app.get("/")
async def root():
    """Ana endpoint"""
    return {
        "message": "üß† Mobil Rehber AI Servisi",
        "version": "1.0.0",
        "model_loaded": model is not None,
        "endpoints": {
            "/analyze": "POST - G√∂rsel analizi",
            "/health": "GET - Sistem durumu"
        }
    }

@app.get("/health")
async def health_check():
    """Sistem durumu kontrol√º"""
    return {
        "status": "healthy",
        "model_loaded": model is not None,
        "timestamp": time.time()
    }

@app.post("/analyze")
async def analyze_image(request: Request):
    """G√∂rsel analizi endpoint'i"""

    if not model:
        raise HTTPException(status_code=500, detail="AI modeli y√ºklenemedi")

    try:
        # JSON body'den veriyi oku
        body = await request.json()
        image_base64 = body.get("image_base64")

        if not image_base64:
            raise HTTPException(status_code=400, detail="G√∂rsel bulunamadƒ±")

        # G√∂rseli i≈üle
        image_data = base64.b64decode(image_base64)
        logger.info(f"üì± Base64 formatƒ±nda g√∂rsel alƒ±ndƒ±: {len(image_data)} bytes")

        pil_image = Image.open(io.BytesIO(image_data))
        cv_image = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)

        # YOLOv5 ile analiz
        logger.info("üîç YOLOv5 analizi ba≈ülatƒ±lƒ±yor...")
        results = model(cv_image)

        # Sonu√ßlarƒ± i≈üle
        objects, confidence, processing_time = process_yolo_results_optimized(results[0], cv_image)
        analysis_result = process_yolo_results(results[0], cv_image)

        logger.info(f"‚úÖ Analiz tamamlandƒ±: {analysis_result}")

        return {
            "success": True,
            "objects": objects,
            "confidence": confidence,
            "processing_time": processing_time,
            "description": analysis_result
        }

    except HTTPException as e:
        raise e  # HTTP hatalarƒ±nƒ± doƒürudan ilet
    except Exception as e:
        logger.error(f"‚ùå Analiz hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"Analiz hatasƒ±: {str(e)}")

def process_yolo_results_optimized(result, image):
    """YOLOv5 sonu√ßlarƒ±nƒ± i≈üle ve mobil uygulama i√ßin optimize et"""
    
    start_time = time.time()
    
    if result.boxes is None or len(result.boxes) == 0:
        return [], 0.0, 0.0
    
    # Tespit edilen nesneleri grupla
    detected_objects = {}
    total_confidence = 0.0
    object_count = 0
    
    for box in result.boxes:
        if box.conf > 0.5:  # G√ºven e≈üiƒüi
            class_id = int(box.cls[0])
            class_name = COCO_CLASSES[class_id]
            confidence = float(box.conf[0])
            
            if class_name not in detected_objects:
                detected_objects[class_name] = []
            detected_objects[class_name].append(confidence)
            total_confidence += confidence
            object_count += 1
    
    if not detected_objects:
        return [], 0.0, 0.0
    
    # Ortalama g√ºven oranƒ±
    avg_confidence = total_confidence / object_count if object_count > 0 else 0.0
    
    # Nesne listesini olu≈ütur (tekrar edenleri kaldƒ±r)
    unique_objects = list(detected_objects.keys())
    
    # ƒ∞≈ülem s√ºresi
    processing_time = time.time() - start_time
    
    return unique_objects, avg_confidence, processing_time

def process_yolo_results(result, image):
    """YOLOv5 sonu√ßlarƒ±nƒ± i≈üle ve T√ºrk√ße a√ßƒ±klama olu≈ütur"""
    
    if result.boxes is None or len(result.boxes) == 0:
        return "G√∂rselde herhangi bir nesne tespit edilemedi."
    
    # Tespit edilen nesneleri grupla
    detected_objects = {}
    for box in result.boxes:
        if box.conf > 0.5:  # G√ºven e≈üiƒüi
            class_id = int(box.cls[0])
            class_name = COCO_CLASSES[class_id]
            confidence = float(box.conf[0])
            
            if class_name not in detected_objects:
                detected_objects[class_name] = []
            detected_objects[class_name].append(confidence)
    
    if not detected_objects:
        return "G√∂rselde g√ºvenilir nesne tespit edilemedi."
    
    # T√ºrk√ße a√ßƒ±klama olu≈ütur
    descriptions = []
    
    # Ana nesneleri belirle
    main_objects = []
    for obj_name, confidences in detected_objects.items():
        avg_conf = sum(confidences) / len(confidences)
        if avg_conf > 0.7:  # Y√ºksek g√ºvenilirlik
            main_objects.append((obj_name, avg_conf))
    
    # Ana nesneleri g√ºvenilirlik sƒ±rasƒ±na g√∂re sƒ±rala
    main_objects.sort(key=lambda x: x[1], reverse=True)
    
    # A√ßƒ±klama olu≈ütur
    if len(main_objects) == 1:
        obj_name, conf = main_objects[0]
        descriptions.append(f"G√∂rselde {translate_to_turkish(obj_name)} tespit edildi.")
    else:
        obj_names = [translate_to_turkish(obj[0]) for obj in main_objects[:3]]  # En fazla 3 nesne
        descriptions.append(f"G√∂rselde {', '.join(obj_names)} tespit edildi.")
    
    # G√ºvenlik uyarƒ±larƒ±
    safety_warnings = []
    for obj_name in detected_objects.keys():
        if obj_name in ['person', 'car', 'bicycle', 'motorcycle']:
            safety_warnings.append(f"Dikkat: {translate_to_turkish(obj_name)} var, g√ºvenli mesafeyi koruyun.")
        elif obj_name in ['stairs', 'step', 'chair', 'table']:
            safety_warnings.append(f"Engel: {translate_to_turkish(obj_name)} tespit edildi.")
    
    if safety_warnings:
        descriptions.extend(safety_warnings)
    
    # Y√∂n √∂nerisi
    if len(main_objects) > 1:
        descriptions.append("√áevrenizde birden fazla nesne var, dikkatli hareket edin.")
    
    return " ".join(descriptions)

def translate_to_turkish(english_name):
    """ƒ∞ngilizce nesne isimlerini T√ºrk√ße'ye √ßevir"""
    translations = {
        'person': 'ki≈üi',
        'car': 'araba',
        'bicycle': 'bisiklet',
        'motorcycle': 'motosiklet',
        'chair': 'sandalye',
        'table': 'masa',
        'bed': 'yatak',
        'couch': 'koltuk',
        'tv': 'televizyon',
        'laptop': 'diz√ºst√º bilgisayar',
        'phone': 'telefon',
        'book': 'kitap',
        'cup': 'bardak',
        'bottle': '≈üi≈üe',
        'dog': 'k√∂pek',
        'cat': 'kedi',
        'bird': 'ku≈ü',
        'plant': 'bitki',
        'tree': 'aƒüa√ß',
        'flower': '√ßi√ßek'
    }
    
    return translations.get(english_name, english_name)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)


